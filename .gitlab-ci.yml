build-job:
  stage: build
  script:
    - echo "Hello, $GITLAB_USER_LOGIN!"

test-job1:
  stage: test
  script:
    - echo "This job tests something"

test-job2:
  stage: test
  script:
    - echo "This job tests something, but takes more time than test-job1."
    - echo "After the echo commands complete, it runs the sleep command for 5 seconds"
    - echo "which simulates a test that runs 5 seconds longer than test-job1"
    - sleep 5

deploy-prod:
  stage: deploy
  script:
    - echo "This job deploys something from the $CI_COMMIT_BRANCH branch."
  environment: production


# # This file is a template, and might need editing before it works on your project.
# # To contribute improvements to CI/CD templates, please follow the Development guide at:
# # https://docs.gitlab.com/ee/development/cicd/templates.html
# # This specific template is located at:
# # https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Docker.gitlab-ci.yml

# # Build a Docker image with CI/CD and push to the GitLab registry.
# # Docker-in-Docker documentation: https://docs.gitlab.com/ee/ci/docker/using_docker_build.html
# #
# # This template uses one generic job with conditional builds
# # for the default branch and all other (MR) branches.

# docker-build:
#   # Use the official docker image.
#   image: docker:cli
#   stage: build
#   services:
#     - docker:dind
#   variables:
#     DOCKER_IMAGE_NAME: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
#   before_script:
#     - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
#   # All branches are tagged with $DOCKER_IMAGE_NAME (defaults to commit ref slug)
#   # Default branch is also tagged with `latest`
#   script:
#     - docker build --pull -t "$DOCKER_IMAGE_NAME" .
#     - docker push "$DOCKER_IMAGE_NAME"
#     - |
#       if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
#         docker tag "$DOCKER_IMAGE_NAME" "$CI_REGISTRY_IMAGE:latest"
#         docker push "$CI_REGISTRY_IMAGE:latest"
#       fi
#   # Run this job in a branch where a Dockerfile exists
#   rules:
#     - if: $CI_COMMIT_BRANCH
#       exists:
#         - Dockerfile
